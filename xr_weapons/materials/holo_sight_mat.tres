[gd_resource type="ShaderMaterial" load_steps=40 format=2]

[ext_resource path="res://xr_weapons/textures/Holo_sight/Cross.tga" type="Texture" id=1]

[sub_resource type="VisualShaderNodeVectorOp" id=36]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=38]

[sub_resource type="VisualShaderNodeScalarConstant" id=39]
constant = 0.5

[sub_resource type="VisualShaderNodeVectorOp" id=41]
operator = 2

[sub_resource type="VisualShaderNodeVectorClamp" id=43]

[sub_resource type="VisualShaderNodeVectorFunc" id=44]
function = 34

[sub_resource type="VisualShaderNodeInput" id=56]
input_name = "camera"

[sub_resource type="VisualShaderNodeTransformVecMult" id=46]
operator = 1

[sub_resource type="VisualShaderNodeTransformDecompose" id=57]

[sub_resource type="VisualShaderNodeInput" id=58]
input_name = "world"

[sub_resource type="VisualShaderNodeTransformDecompose" id=59]

[sub_resource type="VisualShaderNodeVectorOp" id=60]
operator = 1

[sub_resource type="VisualShaderNodeVectorLen" id=61]

[sub_resource type="VisualShaderNodeScalarOp" id=62]
operator = 3

[sub_resource type="VisualShaderNodeVectorOp" id=63]
operator = 1

[sub_resource type="VisualShaderNodeVectorCompose" id=64]

[sub_resource type="VisualShaderNodeScalarUniform" id=65]
uniform_name = "Offset_X"
default_value_enabled = true

[sub_resource type="VisualShaderNodeScalarUniform" id=66]
uniform_name = "Offset_Y"
default_value_enabled = true

[sub_resource type="VisualShaderNodeInput" id=48]
input_name = "inv_camera"

[sub_resource type="VisualShaderNodeVectorDecompose" id=67]

[sub_resource type="VisualShaderNodeColorUniform" id=69]
uniform_name = "Holo_Color"
default_value_enabled = true
default_value = Color( 0.115782, 1, 0, 1 )

[sub_resource type="VisualShaderNodeColorUniform" id=70]
uniform_name = "Glass_Color"
default_value_enabled = true
default_value = Color( 1, 0.760784, 0, 0.0666667 )

[sub_resource type="VisualShaderNodeIf" id=71]

[sub_resource type="VisualShaderNodeIf" id=72]
default_input_values = [ 0, 0.0, 1, 0.0, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 1, 1, 1 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeScalarConstant" id=73]
constant = 256.0

[sub_resource type="VisualShaderNodeScalarUniform" id=74]
uniform_name = "Scale"
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeScalarOp" id=84]
default_input_values = [ 0, 0.0, 1, 10.0 ]
operator = 2

[sub_resource type="VisualShaderNodeTextureUniform" id=89]
uniform_name = "Cross_sprite"
texture_type = 1

[sub_resource type="VisualShaderNodeVectorOp" id=90]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=91]
uniform_name = "Glow"
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeInput" id=92]
input_name = "front_facing"

[sub_resource type="VisualShaderNodeScalarFunc" id=93]
function = 31

[sub_resource type="VisualShaderNodeInput" id=50]
input_name = "view"

[sub_resource type="VisualShaderNodeVectorFunc" id=51]

[sub_resource type="VisualShaderNodeVectorFunc" id=52]
function = 2

[sub_resource type="VisualShaderNodeTransformVecMult" id=53]
operator = 1

[sub_resource type="VisualShaderNodeInput" id=54]
input_name = "world"

[sub_resource type="VisualShader" id=88]
code = "shader_type spatial;
render_mode cull_disabled, specular_schlick_ggx, async_visible, unshaded;

uniform float Scale = 1;
uniform float Offset_X = 0;
uniform float Offset_Y = 0;
uniform sampler2D Cross_sprite : hint_albedo;
uniform vec4 Glass_Color : hint_color = vec4(1.000000, 0.760784, 0.000000, 0.066667);
uniform float Glow = 1;
uniform vec4 Holo_Color : hint_color = vec4(0.115782, 1.000000, 0.000000, 1.000000);



void vertex() {
// Output:0

}

void fragment() {
// Input:9
	mat4 n_out9p0 = WORLD_MATRIX;

// Input:3
	mat4 n_out3p0 = INV_CAMERA_MATRIX;

// Input:5
	vec3 n_out5p0 = VIEW;

// VectorFunc:6
	vec3 n_out6p0 = normalize(n_out5p0);

// VectorFunc:7
	vec3 n_out7p0 = -(n_out6p0);

// TransformVectorMult:2
	vec3 n_out2p0 = (vec4(n_out7p0, 1.0) * n_out3p0).xyz;

// Input:19
	mat4 n_out19p0 = CAMERA_MATRIX;

// TransformDecompose:20
	vec3 n_out20p0 = n_out19p0[0].xyz;
	vec3 n_out20p1 = n_out19p0[1].xyz;
	vec3 n_out20p2 = n_out19p0[2].xyz;
	vec3 n_out20p3 = n_out19p0[3].xyz;

// Input:21
	mat4 n_out21p0 = WORLD_MATRIX;

// TransformDecompose:22
	vec3 n_out22p0 = n_out21p0[0].xyz;
	vec3 n_out22p1 = n_out21p0[1].xyz;
	vec3 n_out22p2 = n_out21p0[2].xyz;
	vec3 n_out22p3 = n_out21p0[3].xyz;

// VectorOp:23
	vec3 n_out23p0 = n_out20p3 - n_out22p3;

// VectorLen:24
	float n_out24p0 = length(n_out23p0);

// ScalarUniform:37
	float n_out37p0 = Scale;

// ScalarOp:41
	float n_in41p1 = 10.00000;
	float n_out41p0 = n_out37p0 * n_in41p1;

// ScalarOp:25
	float n_out25p0 = n_out24p0 / n_out41p0;

// VectorOp:15
	vec3 n_out15p0 = n_out2p0 * vec3(n_out25p0);

// TransformVectorMult:8
	vec3 n_out8p0 = (vec4(n_out15p0, 1.0) * n_out9p0).xyz;

// Scalar:36
	float n_out36p0 = 256.000000;

// VectorOp:10
	vec3 n_out10p0 = n_out8p0 * vec3(n_out36p0);

// Scalar:13
	float n_out13p0 = 0.500000;

// VectorOp:12
	vec3 n_out12p0 = n_out10p0 + vec3(n_out13p0);

// VectorClamp:17
	vec3 n_in17p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in17p2 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out17p0 = clamp(n_out12p0, n_in17p1, n_in17p2);

// VectorFunc:18
	vec3 n_out18p0 = vec3(1.0, 1.0, 1.0) - n_out17p0;

// ScalarUniform:28
	float n_out28p0 = Offset_X;

// ScalarUniform:29
	float n_out29p0 = Offset_Y;

// VectorCompose:27
	float n_in27p2 = 0.00000;
	vec3 n_out27p0 = vec3(n_out28p0, n_out29p0, n_in27p2);

// VectorOp:26
	vec3 n_out26p0 = n_out18p0 - n_out27p0;

// TextureUniform:43
	vec3 n_out43p0;
	float n_out43p1;
	{
		vec4 n_tex_read = texture(Cross_sprite, n_out26p0.xy);
		n_out43p0 = n_tex_read.rgb;
		n_out43p1 = n_tex_read.a;
	}

// VectorDecompose:30
	float n_out30p0 = n_out43p0.x;
	float n_out30p1 = n_out43p0.y;
	float n_out30p2 = n_out43p0.z;

// Input:46
	bool n_out46p0 = FRONT_FACING;

// ScalarFunc:47
	float n_out47p0 = 1.0 - (n_out46p0 ? 1.0 : 0.0);

// ColorUniform:33
	vec3 n_out33p0 = Glass_Color.rgb;
	float n_out33p1 = Glass_Color.a;

// ScalarUniform:45
	float n_out45p0 = Glow;

// ColorUniform:32
	vec3 n_out32p0 = Holo_Color.rgb;
	float n_out32p1 = Holo_Color.a;

// VectorOp:44
	vec3 n_out44p0 = vec3(n_out45p0) * n_out32p0;

// If:34
	float n_in34p2 = 0.00001;
	vec3 n_out34p0;
	if(abs(n_out30p0 - n_out47p0) < n_in34p2)
	{
		n_out34p0 = n_out33p0;
	}
	else if(n_out30p0 < n_out47p0)
	{
		n_out34p0 = n_out33p0;
	}
	else
	{
		n_out34p0 = n_out44p0;
	}

// If:35
	float n_in35p2 = 0.00001;
	vec3 n_in35p4 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out35p0;
	if(abs(n_out30p1 - n_out47p0) < n_in35p2)
	{
		n_out35p0 = vec3(n_out33p1);
	}
	else if(n_out30p1 < n_out47p0)
	{
		n_out35p0 = vec3(n_out33p1);
	}
	else
	{
		n_out35p0 = n_in35p4;
	}

// Output:0
	ALBEDO = n_out34p0;
	ALPHA = dot(n_out35p0, vec3(0.333333, 0.333333, 0.333333));

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -893.674, -383.724 )
modes/cull = 2
flags/unshaded = true
nodes/vertex/0/position = Vector2( 480, 140 )
nodes/fragment/0/position = Vector2( 3260, 360 )
nodes/fragment/2/node = SubResource( 46 )
nodes/fragment/2/position = Vector2( -300, 40 )
nodes/fragment/3/node = SubResource( 48 )
nodes/fragment/3/position = Vector2( -540, 20 )
nodes/fragment/5/node = SubResource( 50 )
nodes/fragment/5/position = Vector2( -920, 100 )
nodes/fragment/6/node = SubResource( 51 )
nodes/fragment/6/position = Vector2( -740, 100 )
nodes/fragment/7/node = SubResource( 52 )
nodes/fragment/7/position = Vector2( -540, 100 )
nodes/fragment/8/node = SubResource( 53 )
nodes/fragment/8/position = Vector2( 320, 140 )
nodes/fragment/9/node = SubResource( 54 )
nodes/fragment/9/position = Vector2( 80, 80 )
nodes/fragment/10/node = SubResource( 36 )
nodes/fragment/10/position = Vector2( 660, 220 )
nodes/fragment/12/node = SubResource( 38 )
nodes/fragment/12/position = Vector2( 880, 300 )
nodes/fragment/13/node = SubResource( 39 )
nodes/fragment/13/position = Vector2( 640, 420 )
nodes/fragment/15/node = SubResource( 41 )
nodes/fragment/15/position = Vector2( 60, 240 )
nodes/fragment/17/node = SubResource( 43 )
nodes/fragment/17/position = Vector2( 1160, 320 )
nodes/fragment/18/node = SubResource( 44 )
nodes/fragment/18/position = Vector2( 1320, 320 )
nodes/fragment/19/node = SubResource( 56 )
nodes/fragment/19/position = Vector2( -1120, 320 )
nodes/fragment/20/node = SubResource( 57 )
nodes/fragment/20/position = Vector2( -940, 320 )
nodes/fragment/21/node = SubResource( 58 )
nodes/fragment/21/position = Vector2( -1120, 460 )
nodes/fragment/22/node = SubResource( 59 )
nodes/fragment/22/position = Vector2( -940, 460 )
nodes/fragment/23/node = SubResource( 60 )
nodes/fragment/23/position = Vector2( -660, 420 )
nodes/fragment/24/node = SubResource( 61 )
nodes/fragment/24/position = Vector2( -460, 440 )
nodes/fragment/25/node = SubResource( 62 )
nodes/fragment/25/position = Vector2( -240, 520 )
nodes/fragment/26/node = SubResource( 63 )
nodes/fragment/26/position = Vector2( 1633.69, 459.422 )
nodes/fragment/27/node = SubResource( 64 )
nodes/fragment/27/position = Vector2( 1340, 680 )
nodes/fragment/28/node = SubResource( 65 )
nodes/fragment/28/position = Vector2( 1020, 580 )
nodes/fragment/29/node = SubResource( 66 )
nodes/fragment/29/position = Vector2( 1020, 740 )
nodes/fragment/30/node = SubResource( 67 )
nodes/fragment/30/position = Vector2( 2000, 480 )
nodes/fragment/32/node = SubResource( 69 )
nodes/fragment/32/position = Vector2( 1880, -180 )
nodes/fragment/33/node = SubResource( 70 )
nodes/fragment/33/position = Vector2( 1900, 100 )
nodes/fragment/34/node = SubResource( 71 )
nodes/fragment/34/position = Vector2( 2820, -80 )
nodes/fragment/35/node = SubResource( 72 )
nodes/fragment/35/position = Vector2( 2840, 660 )
nodes/fragment/36/node = SubResource( 73 )
nodes/fragment/36/position = Vector2( 360, 360 )
nodes/fragment/37/node = SubResource( 74 )
nodes/fragment/37/position = Vector2( -760, 660 )
nodes/fragment/41/node = SubResource( 84 )
nodes/fragment/41/position = Vector2( -460, 640 )
nodes/fragment/43/node = SubResource( 89 )
nodes/fragment/43/position = Vector2( 1800, 400 )
nodes/fragment/44/node = SubResource( 90 )
nodes/fragment/44/position = Vector2( 2240, -240 )
nodes/fragment/45/node = SubResource( 91 )
nodes/fragment/45/position = Vector2( 1880, -360 )
nodes/fragment/46/node = SubResource( 92 )
nodes/fragment/46/position = Vector2( 2060, 800 )
nodes/fragment/47/node = SubResource( 93 )
nodes/fragment/47/position = Vector2( 2280, 800 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 5, 0, 6, 0, 6, 0, 7, 0, 7, 0, 2, 1, 9, 0, 8, 0, 8, 0, 10, 0, 10, 0, 12, 0, 13, 0, 12, 1, 15, 0, 8, 1, 2, 0, 15, 0, 12, 0, 17, 0, 17, 0, 18, 0, 19, 0, 20, 0, 21, 0, 22, 0, 22, 3, 23, 1, 23, 0, 24, 0, 20, 3, 23, 0, 18, 0, 26, 0, 27, 0, 26, 1, 28, 0, 27, 0, 29, 0, 27, 1, 30, 0, 34, 0, 33, 0, 34, 3, 33, 0, 34, 5, 34, 0, 0, 0, 30, 1, 35, 0, 33, 1, 35, 3, 33, 1, 35, 5, 35, 0, 0, 1, 36, 0, 10, 1, 24, 0, 25, 0, 37, 0, 41, 0, 41, 0, 25, 1, 25, 0, 15, 1, 26, 0, 43, 0, 43, 0, 30, 0, 32, 0, 44, 1, 45, 0, 44, 0, 44, 0, 34, 4, 46, 0, 47, 0, 47, 0, 34, 1, 47, 0, 35, 1 )

[resource]
shader = SubResource( 88 )
shader_param/Scale = 0.063
shader_param/Offset_X = 0.0
shader_param/Offset_Y = 0.0
shader_param/Glass_Color = Color( 1, 0.760784, 0, 0.066667 )
shader_param/Glow = 2.569
shader_param/Holo_Color = Color( 0.115782, 1, 0, 1 )
shader_param/Cross_sprite = ExtResource( 1 )
